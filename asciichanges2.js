/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function(root) {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleFunctions = { document: peg$parsedocument },
        peg$startRuleFunction  = peg$parsedocument,

        peg$c0 = function(lines) { return lines.flat(); },
        peg$c1 = function(content) { return content; },
        peg$c2 = " ",
        peg$c3 = peg$literalExpectation(" ", false),
        peg$c4 = "\t",
        peg$c5 = peg$literalExpectation("\t", false),
        peg$c6 = "\n",
        peg$c7 = peg$literalExpectation("\n", false),
        peg$c8 = function(c) { return [c]; },
        peg$c9 = "|",
        peg$c10 = peg$literalExpectation("|", false),
        peg$c11 = function(bars) { return bars; },
        peg$c12 = function(chords) { return chords; },
        peg$c13 = function(head, chord) { return chord; },
        peg$c14 = function(head, tail) { return [head].concat(tail); },
        peg$c15 = "/",
        peg$c16 = peg$literalExpectation("/", false),
        peg$c17 = function() { return { type: 'beat' }; },
        peg$c18 = function(root, quality, additions, suspended, note) { return note; },
        peg$c19 = function(root, quality, additions, suspended, slash) {
            	var ret = {
                	type: 'chord',
                    text: text(),
                	root: root,
                	quality: quality ? quality : { third: 4, fifth: 7 },
                    additions: additions,
                    slash: slash,
                };

                if (suspended) {
                	ret.third = suspended;
                }

                return ret;
            },
        peg$c20 = function(seventh, fifth, extensions) { return { third: 4, fifth: fifth ? fifth : [7], seventh: seventh, extensions: extensions }; },
        peg$c21 = function(seventh, fifth, extensions) { return { third: 3, fifth: fifth ? fifth : [7], seventh: seventh ? seventh : extensions ? 10 : null, extensions: extensions }; },
        peg$c22 = function(seventh, extensions) { return { third: 3, fifth: [8], seventh: seventh ? seventh : extensions ? 10 : null, extensions: extensions }; },
        peg$c23 = function(fifth, extensions) { return { third: 4, fifth: fifth ? fifth : [7], seventh: 10, extensions: extensions }; },
        peg$c24 = function(fifth) { return { third: 4, fifth: fifth ? fifth : [7], seventh: null, extensions: null }; },
        peg$c25 = "sus4",
        peg$c26 = peg$literalExpectation("sus4", false),
        peg$c27 = function() { return 5; },
        peg$c28 = "sus2",
        peg$c29 = peg$literalExpectation("sus2", false),
        peg$c30 = function() { return 2; },
        peg$c31 = "sus",
        peg$c32 = peg$literalExpectation("sus", false),
        peg$c33 = "(",
        peg$c34 = peg$literalExpectation("(", false),
        peg$c35 = ")",
        peg$c36 = peg$literalExpectation(")", false),
        peg$c37 = function(fifth) { return fifth; },
        peg$c38 = "5",
        peg$c39 = peg$literalExpectation("5", false),
        peg$c40 = function() { return [6, 8]; },
        peg$c41 = function() { return [6]; },
        peg$c42 = function() { return [8]; },
        peg$c43 = "6",
        peg$c44 = peg$literalExpectation("6", false),
        peg$c45 = function() { return 9; },
        peg$c46 = "M7",
        peg$c47 = peg$literalExpectation("M7", false),
        peg$c48 = "M",
        peg$c49 = peg$literalExpectation("M", false),
        peg$c50 = "7",
        peg$c51 = peg$literalExpectation("7", false),
        peg$c52 = function() { return 11; },
        peg$c53 = function() { return 10; },
        peg$c54 = function(n, t, e, th) { return th.concat(e).concat(t).concat(n).filter(x => x); },
        peg$c55 = function(n, t, e) { return e.concat(t).concat(n).filter(x => x); },
        peg$c56 = function(n, t) { return t.concat(n).filter(x => x); },
        peg$c57 = "9",
        peg$c58 = peg$literalExpectation("9", false),
        peg$c59 = function() { return [13, 15]; },
        peg$c60 = function() { return [13]; },
        peg$c61 = function() { return [15]; },
        peg$c62 = function() { return [14]; },
        peg$c63 = "10",
        peg$c64 = peg$literalExpectation("10", false),
        peg$c65 = function() { return [16]; },
        peg$c66 = "11",
        peg$c67 = peg$literalExpectation("11", false),
        peg$c68 = function() { return [18]; },
        peg$c69 = function() { return [17]; },
        peg$c70 = "13",
        peg$c71 = peg$literalExpectation("13", false),
        peg$c72 = function() { return [20]; },
        peg$c73 = function() { return [21]; },
        peg$c74 = "add",
        peg$c75 = peg$literalExpectation("add", false),
        peg$c76 = "2",
        peg$c77 = peg$literalExpectation("2", false),
        peg$c78 = function() { return 1; },
        peg$c79 = function() { return 3; },
        peg$c80 = "3",
        peg$c81 = peg$literalExpectation("3", false),
        peg$c82 = function() { return 4; },
        peg$c83 = "4",
        peg$c84 = peg$literalExpectation("4", false),
        peg$c85 = function() { return 6; },
        peg$c86 = function() { return 8; },
        peg$c87 = function() { return 7; },
        peg$c88 = function() { return 14; },
        peg$c89 = function() { return 13; },
        peg$c90 = function() { return 15; },
        peg$c91 = function() { return 16; },
        peg$c92 = function() { return 17; },
        peg$c93 = function() { return 18; },
        peg$c94 = "12",
        peg$c95 = peg$literalExpectation("12", false),
        peg$c96 = function() { return 19; },
        peg$c97 = function() { return 20; },
        peg$c98 = function() { return 21; },
        peg$c99 = function(note) { return note; },
        peg$c100 = function(letter, accidentals) {
            	return (letter + accidentals + 12) % 12;
            },
        peg$c101 = "C",
        peg$c102 = peg$literalExpectation("C", false),
        peg$c103 = "c",
        peg$c104 = peg$literalExpectation("c", false),
        peg$c105 = function() { return 0; },
        peg$c106 = "D",
        peg$c107 = peg$literalExpectation("D", false),
        peg$c108 = "d",
        peg$c109 = peg$literalExpectation("d", false),
        peg$c110 = "E",
        peg$c111 = peg$literalExpectation("E", false),
        peg$c112 = "e",
        peg$c113 = peg$literalExpectation("e", false),
        peg$c114 = "F",
        peg$c115 = peg$literalExpectation("F", false),
        peg$c116 = "f",
        peg$c117 = peg$literalExpectation("f", false),
        peg$c118 = "G",
        peg$c119 = peg$literalExpectation("G", false),
        peg$c120 = "g",
        peg$c121 = peg$literalExpectation("g", false),
        peg$c122 = "A",
        peg$c123 = peg$literalExpectation("A", false),
        peg$c124 = "a",
        peg$c125 = peg$literalExpectation("a", false),
        peg$c126 = "B",
        peg$c127 = peg$literalExpectation("B", false),
        peg$c128 = "b",
        peg$c129 = peg$literalExpectation("b", false),
        peg$c130 = function(flats) { return -1 * flats.length; },
        peg$c131 = function(sharps) { return sharps.length; },
        peg$c132 = "\u266D",
        peg$c133 = peg$literalExpectation("\u266D", false),
        peg$c134 = "\u266F",
        peg$c135 = peg$literalExpectation("\u266F", false),
        peg$c136 = "#",
        peg$c137 = peg$literalExpectation("#", false),
        peg$c138 = "major",
        peg$c139 = peg$literalExpectation("major", false),
        peg$c140 = "maj",
        peg$c141 = peg$literalExpectation("maj", false),
        peg$c142 = "minor",
        peg$c143 = peg$literalExpectation("minor", false),
        peg$c144 = "min",
        peg$c145 = peg$literalExpectation("min", false),
        peg$c146 = "m",
        peg$c147 = peg$literalExpectation("m", false),
        peg$c148 = "-",
        peg$c149 = peg$literalExpectation("-", false),
        peg$c150 = "aug",
        peg$c151 = peg$literalExpectation("aug", false),
        peg$c152 = "+",
        peg$c153 = peg$literalExpectation("+", false),
        peg$c154 = "dim",
        peg$c155 = peg$literalExpectation("dim", false),
        peg$c156 = "o",
        peg$c157 = peg$literalExpectation("o", false),
        peg$c158 = "0",
        peg$c159 = peg$literalExpectation("0", false),
        peg$c160 = "\xF8",
        peg$c161 = peg$literalExpectation("\xF8", false),

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parsedocument() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseline();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseline();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c0(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseline() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsewhitespace();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsewhitespace();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecontent();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsewhitespace();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsewhitespace();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsenewline();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c1(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsenewline();
      }

      return s0;
    }

    function peg$parsewhitespace() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 32) {
        s0 = peg$c2;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 9) {
          s0 = peg$c4;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
      }

      return s0;
    }

    function peg$parsenewline() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c6;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }

      return s0;
    }

    function peg$parsecontent() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsechords();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c8(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$parsebars();
      }

      return s0;
    }

    function peg$parsebars() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 124) {
        s1 = peg$c9;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsebar();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsebar();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c11(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebar() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsewhitespace();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsewhitespace();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsechords();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsewhitespace();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsewhitespace();
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 124) {
              s4 = peg$c9;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c10); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c12(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsechords() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsechordlike();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parsewhitespace();
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsechordlike();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c13(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parsewhitespace();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewhitespace();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsechordlike();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c13(s1, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c14(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsechordlike() {
      var s0;

      s0 = peg$parsechord();
      if (s0 === peg$FAILED) {
        s0 = peg$parsebeat();
      }

      return s0;
    }

    function peg$parsebeat() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s1 = peg$c15;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c17();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsechord() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsenote();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsequality();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseaddition();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseaddition();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesuspended();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 47) {
                s6 = peg$c15;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c16); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsenote();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s5;
                  s6 = peg$c18(s1, s2, s3, s4, s7);
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c19(s1, s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsequality() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsesixth_or_seventh();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefifth();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseextensions();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c20(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseminor();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsesixth_or_seventh();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsefifth();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseextensions();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c21(s2, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseaugmented();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsesixth_or_seventh();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseextensions();
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsebracketed_fifth();
            if (s1 === peg$FAILED) {
              s1 = null;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseextensions();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c23(s1, s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsebracketed_fifth();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c24(s1);
              }
              s0 = s1;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesuspended() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c25) {
        s1 = peg$c25;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c27();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c28) {
          s1 = peg$c28;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c29); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c30();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c31) {
            s1 = peg$c31;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c27();
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parsebracketed_fifth() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c33;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefifth();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c35;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c36); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c37(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsefifth();
      }

      return s0;
    }

    function peg$parsefifth() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseflat();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 53) {
          s2 = peg$c38;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c39); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesharp();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 53) {
              s4 = peg$c38;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c39); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c40();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseflat();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 53) {
            s2 = peg$c38;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c39); }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c41();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsesharp();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 53) {
              s2 = peg$c38;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c39); }
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c42();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      return s0;
    }

    function peg$parsesixth_or_seventh() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 54) {
        s1 = peg$c43;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c44); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c45();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$parseseventh();
      }

      return s0;
    }

    function peg$parseseventh() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c46) {
        s1 = peg$c46;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c47); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 77) {
          s1 = peg$c48;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c49); }
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = peg$parsemajor();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 55) {
              s3 = peg$c50;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c51); }
            }
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 === peg$FAILED) {
            s1 = peg$parsemajor();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c52();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 55) {
          s1 = peg$c50;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c51); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c53();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseextensions() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsenineth();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetenth();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseeleventh();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsethirteenth();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c54(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsenineth();
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetenth();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseeleventh();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c55(s1, s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsenineth();
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsetenth();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c56(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parsenineth();
          }
        }
      }

      return s0;
    }

    function peg$parsenineth() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseflat();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 57) {
          s2 = peg$c57;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c58); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesharp();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 57) {
              s4 = peg$c57;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c58); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c59();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseflat();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 57) {
            s2 = peg$c57;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c58); }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c60();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsesharp();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 57) {
              s2 = peg$c57;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c58); }
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c61();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 57) {
              s1 = peg$c57;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c58); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c62();
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parsetenth() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseflat();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c63) {
          s2 = peg$c63;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c64); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c61();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c63) {
          s1 = peg$c63;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c64); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c65();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseeleventh() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsesharp();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c66) {
          s2 = peg$c66;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c67); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c68();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c66) {
          s1 = peg$c66;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c67); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c69();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parsethirteenth() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseflat();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c70) {
          s2 = peg$c70;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c71); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c72();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c70) {
          s1 = peg$c70;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c71); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c73();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseaddition() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c74) {
        s1 = peg$c74;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseflat();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 50) {
            s4 = peg$c76;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c77); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c78();
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parsesharp();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 50) {
              s4 = peg$c76;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c77); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s2;
              s3 = peg$c79();
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 50) {
              s3 = peg$c76;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c77); }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s2;
              s3 = peg$c30();
            }
            s2 = s3;
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseflat();
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 51) {
                  s4 = peg$c80;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c81); }
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c79();
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 51) {
                  s3 = peg$c80;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c81); }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c82();
                }
                s2 = s3;
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 52) {
                    s3 = peg$c83;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c84); }
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s2;
                    s3 = peg$c27();
                  }
                  s2 = s3;
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parsesharp();
                    if (s3 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 52) {
                        s4 = peg$c83;
                        peg$currPos++;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c84); }
                      }
                      if (s4 !== peg$FAILED) {
                        peg$savedPos = s2;
                        s3 = peg$c85();
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      s3 = peg$parseflat();
                      if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 53) {
                          s4 = peg$c38;
                          peg$currPos++;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c39); }
                        }
                        if (s4 !== peg$FAILED) {
                          peg$savedPos = s2;
                          s3 = peg$c85();
                          s2 = s3;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos;
                        s3 = peg$parsesharp();
                        if (s3 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 53) {
                            s4 = peg$c38;
                            peg$currPos++;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c39); }
                          }
                          if (s4 !== peg$FAILED) {
                            peg$savedPos = s2;
                            s3 = peg$c86();
                            s2 = s3;
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 53) {
                            s3 = peg$c38;
                            peg$currPos++;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c39); }
                          }
                          if (s3 !== peg$FAILED) {
                            peg$savedPos = s2;
                            s3 = peg$c87();
                          }
                          s2 = s3;
                          if (s2 === peg$FAILED) {
                            s2 = peg$currPos;
                            s3 = peg$parseflat();
                            if (s3 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 54) {
                                s4 = peg$c43;
                                peg$currPos++;
                              } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c44); }
                              }
                              if (s4 !== peg$FAILED) {
                                peg$savedPos = s2;
                                s3 = peg$c86();
                                s2 = s3;
                              } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s2;
                              s2 = peg$FAILED;
                            }
                            if (s2 === peg$FAILED) {
                              s2 = peg$currPos;
                              if (input.charCodeAt(peg$currPos) === 54) {
                                s3 = peg$c43;
                                peg$currPos++;
                              } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c44); }
                              }
                              if (s3 !== peg$FAILED) {
                                peg$savedPos = s2;
                                s3 = peg$c45();
                              }
                              s2 = s3;
                              if (s2 === peg$FAILED) {
                                s2 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 57) {
                                  s3 = peg$c57;
                                  peg$currPos++;
                                } else {
                                  s3 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c58); }
                                }
                                if (s3 !== peg$FAILED) {
                                  peg$savedPos = s2;
                                  s3 = peg$c88();
                                }
                                s2 = s3;
                                if (s2 === peg$FAILED) {
                                  s2 = peg$currPos;
                                  s3 = peg$parseflat();
                                  if (s3 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 57) {
                                      s4 = peg$c57;
                                      peg$currPos++;
                                    } else {
                                      s4 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c58); }
                                    }
                                    if (s4 !== peg$FAILED) {
                                      peg$savedPos = s2;
                                      s3 = peg$c89();
                                      s2 = s3;
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$FAILED;
                                  }
                                  if (s2 === peg$FAILED) {
                                    s2 = peg$currPos;
                                    s3 = peg$parsesharp();
                                    if (s3 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 57) {
                                        s4 = peg$c57;
                                        peg$currPos++;
                                      } else {
                                        s4 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c58); }
                                      }
                                      if (s4 !== peg$FAILED) {
                                        peg$savedPos = s2;
                                        s3 = peg$c90();
                                        s2 = s3;
                                      } else {
                                        peg$currPos = s2;
                                        s2 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$FAILED;
                                    }
                                    if (s2 === peg$FAILED) {
                                      s2 = peg$currPos;
                                      s3 = peg$parseflat();
                                      if (s3 !== peg$FAILED) {
                                        if (input.substr(peg$currPos, 2) === peg$c63) {
                                          s4 = peg$c63;
                                          peg$currPos += 2;
                                        } else {
                                          s4 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c64); }
                                        }
                                        if (s4 !== peg$FAILED) {
                                          peg$savedPos = s2;
                                          s3 = peg$c90();
                                          s2 = s3;
                                        } else {
                                          peg$currPos = s2;
                                          s2 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s2;
                                        s2 = peg$FAILED;
                                      }
                                      if (s2 === peg$FAILED) {
                                        s2 = peg$currPos;
                                        if (input.substr(peg$currPos, 2) === peg$c63) {
                                          s3 = peg$c63;
                                          peg$currPos += 2;
                                        } else {
                                          s3 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c64); }
                                        }
                                        if (s3 !== peg$FAILED) {
                                          peg$savedPos = s2;
                                          s3 = peg$c91();
                                        }
                                        s2 = s3;
                                        if (s2 === peg$FAILED) {
                                          s2 = peg$currPos;
                                          if (input.substr(peg$currPos, 2) === peg$c66) {
                                            s3 = peg$c66;
                                            peg$currPos += 2;
                                          } else {
                                            s3 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c67); }
                                          }
                                          if (s3 !== peg$FAILED) {
                                            peg$savedPos = s2;
                                            s3 = peg$c92();
                                          }
                                          s2 = s3;
                                          if (s2 === peg$FAILED) {
                                            s2 = peg$currPos;
                                            s3 = peg$parsesharp();
                                            if (s3 !== peg$FAILED) {
                                              if (input.substr(peg$currPos, 2) === peg$c66) {
                                                s4 = peg$c66;
                                                peg$currPos += 2;
                                              } else {
                                                s4 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c67); }
                                              }
                                              if (s4 !== peg$FAILED) {
                                                peg$savedPos = s2;
                                                s3 = peg$c93();
                                                s2 = s3;
                                              } else {
                                                peg$currPos = s2;
                                                s2 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s2;
                                              s2 = peg$FAILED;
                                            }
                                            if (s2 === peg$FAILED) {
                                              s2 = peg$currPos;
                                              if (input.substr(peg$currPos, 2) === peg$c94) {
                                                s3 = peg$c94;
                                                peg$currPos += 2;
                                              } else {
                                                s3 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c95); }
                                              }
                                              if (s3 !== peg$FAILED) {
                                                peg$savedPos = s2;
                                                s3 = peg$c96();
                                              }
                                              s2 = s3;
                                              if (s2 === peg$FAILED) {
                                                s2 = peg$currPos;
                                                s3 = peg$parseflat();
                                                if (s3 !== peg$FAILED) {
                                                  if (input.substr(peg$currPos, 2) === peg$c70) {
                                                    s4 = peg$c70;
                                                    peg$currPos += 2;
                                                  } else {
                                                    s4 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c71); }
                                                  }
                                                  if (s4 !== peg$FAILED) {
                                                    peg$savedPos = s2;
                                                    s3 = peg$c97();
                                                    s2 = s3;
                                                  } else {
                                                    peg$currPos = s2;
                                                    s2 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s2;
                                                  s2 = peg$FAILED;
                                                }
                                                if (s2 === peg$FAILED) {
                                                  s2 = peg$currPos;
                                                  if (input.substr(peg$currPos, 2) === peg$c70) {
                                                    s3 = peg$c70;
                                                    peg$currPos += 2;
                                                  } else {
                                                    s3 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c71); }
                                                  }
                                                  if (s3 !== peg$FAILED) {
                                                    peg$savedPos = s2;
                                                    s3 = peg$c98();
                                                  }
                                                  s2 = s3;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c99(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenote() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsenote_letter();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseaccidentals();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c100(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenote_letter() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 67) {
        s1 = peg$c101;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c102); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 99) {
          s1 = peg$c103;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c104); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c105();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 68) {
          s1 = peg$c106;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c107); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 100) {
            s1 = peg$c108;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c109); }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c30();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 69) {
            s1 = peg$c110;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c111); }
          }
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 101) {
              s1 = peg$c112;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c113); }
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c82();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 70) {
              s1 = peg$c114;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c115); }
            }
            if (s1 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 102) {
                s1 = peg$c116;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c117); }
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c27();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 71) {
                s1 = peg$c118;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c119); }
              }
              if (s1 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 103) {
                  s1 = peg$c120;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c121); }
                }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c87();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 65) {
                  s1 = peg$c122;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c123); }
                }
                if (s1 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 97) {
                    s1 = peg$c124;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c125); }
                  }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c45();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 66) {
                    s1 = peg$c126;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c127); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 98) {
                      s1 = peg$c128;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c129); }
                    }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c52();
                  }
                  s0 = s1;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseaccidentals() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseflat();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseflat();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c130(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parsesharp();
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsesharp();
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c131(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseflat() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 9837) {
        s0 = peg$c132;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c133); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 98) {
          s0 = peg$c128;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c129); }
        }
      }

      return s0;
    }

    function peg$parsesharp() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 9839) {
        s0 = peg$c134;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c135); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 35) {
          s0 = peg$c136;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c137); }
        }
      }

      return s0;
    }

    function peg$parsemajor() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c138) {
        s0 = peg$c138;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c139); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c140) {
          s0 = peg$c140;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c141); }
        }
      }

      return s0;
    }

    function peg$parseminor() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c142) {
        s0 = peg$c142;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c143); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c144) {
          s0 = peg$c144;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c145); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 109) {
            s0 = peg$c146;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c147); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s0 = peg$c148;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c149); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseaugmented() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c150) {
        s0 = peg$c150;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c151); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 43) {
          s0 = peg$c152;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c153); }
        }
      }

      return s0;
    }

    function peg$parsediminished() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c154) {
        s0 = peg$c154;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c155); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 111) {
          s0 = peg$c156;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c157); }
        }
      }

      return s0;
    }

    function peg$parsehalf_diminished() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 48) {
        s0 = peg$c158;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c159); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 248) {
          s0 = peg$c160;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c161); }
        }
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  root.pegjs = {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})(this);
